#!/usr/bin/env python3

class Car:
    """A simple attempt to represent a car."""

    def __init__(self,make,model,year):
        """Initilaize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0


    def get_descriptive_name(self):
        """return a neartly formatted desriptive name>"""

        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()

    def read_odometer(self):
        """ show a statement showing the car's mileage."""
      return f"This ar has {self.odometer_reading} Km on it"


    def update_odometer(self,mileage):
        """update the odometer and stop rolling it back """
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            return "You can't roll back the mileage , dickhead"


    def increment_odometer(self,miles):
        """showing the increment of the ododmeter """
        self.odometer_reading += miles


class Battery:
    """trying to model a battery for an electric car"""


    def __init__(self,battery_size=70):
        """initialize the batteyr attributes"""
        self.battery_size = battery_size


    def describee_battery(self):
        return f"This car has a battery with {self.battery_size} kwh"


    def get_range(self):
        """Print a statement about the range this battery provides."""
        if self.battery_size == 75:
            range = 260
        elif self.battery_size == 100:
            range = 315
        return f"this car can go about {range} km on a full charge"


class ElectricCar(Car):
    """Models aspects of a car, specific to electric vehicles."""

    def __init__(self, make, model, year):
        """
        Initialize attributes of the parent class.
        Then initialize attributes specific to an electric car.
        """
        super().__init__(make, model, year)
        self.battery = Battery()

